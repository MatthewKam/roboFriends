{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","console","log","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundary","hasError","error","info","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducter","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8577af6b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error('NOOOOO!');\n  // }\n  console.log('CARDLIST');\n  const cardArray = robots.map((user, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return (\n    <div>\n      {cardArray}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  console.log('SEARCHBOX');\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{\n      overflowY: 'scroll',\n      border: '1px solid black',\n      height: '500px'\n    }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) { \n    if (this.state.count !== nextState.count){\n      return true;\n    }\n    return false;\n  }\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 }\n    })\n  }\n  render() {\n    console.log('CounterButton');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n  render() {\n    console.log('HEADER');\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={'red'}/>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: []\n  //   }\n  // }\n  // doesnt need this.state because we get it from props\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? <h1 className=\"tc\">Loading...</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => {\n  // console.log(text);\n  return {\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n  }\n}\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n// REDUX THUNK MIDDELWARE\n// Redux out of the box is expecting an Object, not a function. \n// Redux thunk catches this and give it the ability to run actions by giving it a dispatch","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  // console.log(action.type);\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default: \n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducter = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducter,\n  applyMiddleware(\n    thunkMiddleware\n  )\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}